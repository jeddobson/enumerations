1:2, function (x) if (x == 100){x<-sample(replace1)[1]} else {x<-x}) for 
(j in 1:ncol(perm.m)){ perm.m[j,j]<-100 } perm.scale <- apply(perm.m, 2, function(x) 
(x-min(x))/(max(x)-min(x))) perm.obs<-vector() for (k in 1:(ncol(perm.scale)-foote.win)){ perm.sub<-perm.scale[k:(k+foote.win), k:(k+foote.win)] perm.sub.m<-perm.sub*foote.m foote.score<-sum(perm.sub.m) 
perm.obs<-append(perm.obs, foote.score) } perm.vec<-append(perm.vec, perm.obs) } #calc significance band perm.high<-mean(perm.vec)+(conf2*sd(perm.vec)) 
foote.prep<-foote.roll[is.na(foote.roll) != TRUE] #smooth again to remove minor peaks foote2<-rollmean(foote.prep, 
k=length(foote.obs)/10) foote2.prep<-foote2 foote2.prep<-append(rep(NA, (length(foote.roll)-length(foote2))/2), foote2.prep) foote2.prep<-append(foote2.prep, rep(NA, (length(foote.roll)-length(foote2))/2)) #find significant 
peaks #note, peaks cannot be within 20 poems of each 
other. A period is pre-defined as 20+ plums #this avoids 
minor variations and takes the largest peak sig<-which(foote2.prep > perm.high) 
if (length(sig) > 0){ diff.sig<-which(diff(sig) > 19) diff.sig<-append(diff.sig, length(sig)) change.v<-vector() 
if (length(diff.sig) > 0) { start<-1 for (l in 1:(length(diff.sig))){ 
sub<-foote2.prep[start:sig[diff.sig[l]]] sub[is.na(sub)]<-0 change.p<-(which(sub == max(sub))+(start-1)) change.v<-append(change.v, change.p) start<-sig[diff.sig[l]]+1 } } 
#plot plot(foote2.prep, type="line", main = author, xlab = "Poems", ylab="Change") 
#rolling mean of this rolling mean abline(h=perm.high, lty=2) abline(v=change.v) #calculate 
measures related to inferred periods periods<-length(change.v)+1 #no. periods author.meta<-data.frame(row.names(cormat)) colnames(author.meta)<-c("dates") 
author.split<-cSplit(author.meta, "dates", sep="_", type.convert=FALSE) periods.sub<-author.split[change.v,] periods.temp<-data.frame(row.names(cormat)[change.v]) periods.temp<-cbind(author, periods.temp) periods.df<-rbind(periods.df, periods.temp) 
#lists poems at the peaks for further analysis period.marks<-as.numeric(periods.sub$dates_1) period.marks<-append(as.numeric(author.split$dates_1)[1], 
period.marks) period.marks<-append(period.marks,as.numeric(author.split$dates_1)[length(author.split$dates_1)]) period.lengths<-diff(period.marks) longest.period<-max(period.lengths) if (which(period.lengths == min(period.lengths)) == length(period.lengths)){ 
when.shortest.period<-c("final") } else { when.shortest.period<-c("not_final") } duration.first.period<-as.numeric(periods.sub$dates_1[1])-as.numeric(author.split$dates_1[1]) year.first.period<-as.numeric(periods.sub$dates_1[1]) year.last.period<-as.numeric(periods.sub$dates_1[length(periods.sub$dates_1)]) duration.last.period<-as.numeric(author.split$dates_1[length(author.split$dates_1)])-as.numeric(periods.sub$dates_1[length(periods.sub$dates_1)]) 
birth<-as.numeric(meta$birth.date[m]) death<-as.numeric(meta$death.date[m]) age.first.period<-year.first.period-birth age.last.period<-year.last.period-birth gender<-meta$gender[m] century<-meta$century[m] } else { periods<-0 
duration.first.period<-0 year.first.period<-0 year.last.period<-0 duration.last.period<-0 birth<-as.numeric(meta$birth.date[m]) death<-as.numeric(meta$death.date[m]) age.first.period<-0 age.last.period<-0 when.shortest.period<-c("none") longest.period<-0 
} temp.df<-data.frame(author, birth, death, gender, century, periods,+ year.first.period, age.first.period, duration.first.period,+ 
year.last.period, age.last.period, duration.last.period,+ longest.period, when.shortest.period,vuln.score1, vuln.score2,+ vuln.final.quart) results.df<-rbind(results.df, temp.df) } 
setwd(homedir) setwd("~/Sites/Topologies - Tests/Corpus/German") write.csv(results.df, file="German_Periods_Sig2.csv") write.csv(periods.df, file="German_Periods_Poems_Sig2.csv") library("tm") library("SnowballC") 
library("RWeka") library("proxy") library("corpcor") library("reshape2") library("lsa") library("igraph") library("splitstackshape") require("NLP") library("openNLP") library("openNLPdata") 
sent_token_annotator <- Maxent_Sent_Token_Annotator(language = "en") word_token_annotator <- Maxent_Word_Token_Annotator(language = "en") 
pos_tag_annotator <- Maxent_POS_Tag_Annotator(language = "en") setwd("~/Sites/Topologies - Data/Topologies - Data 
(Poetry)/PoetryCorpusesAuthor/") setwd("~/Sites/Topologies - Data/Topologies - Data (Poetry)/PoetryCorpusesAuthor/") filenames<-list.files("PoetryAuthors_English", full.names=FALSE) filenames 
i=13 setwd("~/Sites/Topologies - Data/Topologies - Data (Poetry)/PoetryCorpusesAuthor/PoetryAuthors_English/") filenames2<-list.files(filenames[i], pattern="*.txt", full.names=FALSE) 
dir<-paste("~/Sites/Topologies - Data/Topologies - Data (Poetry)/PoetryCorpusesAuthor/PoetryAuthors_English/", filenames[i], sep="") setwd(dir) filenames2 
setwd(dir) for (j in 1:length(filenames2)){ setwd(dir) work<-scan(filenames2[j], what="character", quote="") work.clean<- 
gsub("\\d", "", work) text.whole<-paste(work.clean, collapse=" ") # collapse into single 
chunk text.char<-as.String(text.whole) a2 <- annotate(text.char, list(sent_token_annotator, word_token_annotator)) a3 <- annotate(text.char, 
pos_tag_annotator, a2) a3w <- subset(a3, type == "word") tags <- 
sapply(a3w$features, `[[`, "POS") tags.final<-paste(tags, collapse = " ") dir2<-paste("~/Sites/Topologies - 
Data/Topologies - Data (Poetry)/PoetryCorpusesAuthor/PoetryAuthors_English_POS", "/", filenames[i], "_POS", sep="") setwd(dir2) write(tags.final, 
file = filenames2[j]) } filenames2 j setwd(dir) dir work<-scan(filenames2[j], what="character", 
quote="") work.clean<- gsub("\\d", "", work) text.whole<-paste(work.clean, collapse=" ") # collapse 
into single chunk text.char<-as.String(text.whole) a2 <- annotate(text.char, list(sent_token_annotator, word_token_annotator)) 